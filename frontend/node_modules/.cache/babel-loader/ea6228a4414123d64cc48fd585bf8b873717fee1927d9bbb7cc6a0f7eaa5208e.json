{"ast":null,"code":"/*!\r\n * mime-types\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n'use strict';\n\n/**\r\n * Module dependencies.\r\n * @private\r\n */\nvar db = require('mime-db');\nvar extname = require('path').extname;\nvar mimeScore = require('./mimeScore');\n\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar TEXT_TYPE_REGEXP = /^text\\//i;\n\n/**\r\n * Module exports.\r\n * @public\r\n */\n\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null);\nexports._extensionConflicts = [];\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types);\n\n/**\r\n * Get the default charset for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\n\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n  if (mime && mime.charset) {\n    return mime.charset;\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8';\n  }\n  return false;\n}\n\n/**\r\n * Create a full Content-Type header given a MIME type or extension.\r\n *\r\n * @param {string} str\r\n * @return {boolean|string}\r\n */\n\nfunction contentType(str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n  if (!mime) {\n    return false;\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n  return mime;\n}\n\n/**\r\n * Get the default extension for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\n\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n  if (!exts || !exts.length) {\n    return false;\n  }\n  return exts[0];\n}\n\n/**\r\n * Lookup the MIME type for a file path/extension.\r\n *\r\n * @param {string} path\r\n * @return {boolean|string}\r\n */\n\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path).toLowerCase().slice(1);\n  if (!extension) {\n    return false;\n  }\n  return exports.types[extension] || false;\n}\n\n/**\r\n * Populate the extensions and types maps.\r\n * @private\r\n */\n\nfunction populateMaps(extensions, types) {\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n    if (!exts || !exts.length) {\n      return;\n    }\n\n    // mime -> extensions\n    extensions[type] = exts;\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n      types[extension] = _preferredType(extension, types[extension], type);\n\n      // DELETE (eventually): Capture extension->type maps that change as a\n      // result of switching to mime-score.  This is just to help make reviewing\n      // PR #119 easier, and can be removed once that PR is approved.\n      const legacyType = _preferredTypeLegacy(extension, types[extension], type);\n      if (legacyType !== types[extension]) {\n        exports._extensionConflicts.push([extension, legacyType, types[extension]]);\n      }\n    }\n  });\n}\n\n// Resolve type conflict using mime-score\nfunction _preferredType(ext, type0, type1) {\n  var score0 = type0 ? mimeScore(type0, db[type0].source) : 0;\n  var score1 = type1 ? mimeScore(type1, db[type1].source) : 0;\n  return score0 > score1 ? type0 : type1;\n}\n\n// Resolve type conflict using pre-mime-score logic\nfunction _preferredTypeLegacy(ext, type0, type1) {\n  var SOURCE_RANK = ['nginx', 'apache', undefined, 'iana'];\n  var score0 = type0 ? SOURCE_RANK.indexOf(db[type0].source) : 0;\n  var score1 = type1 ? SOURCE_RANK.indexOf(db[type1].source) : 0;\n  if (exports.types[extension] !== 'application/octet-stream' && (score0 > score1 || score0 === score1 && exports.types[extension]?.slice(0, 12) === 'application/')) {\n    return type0;\n  }\n  return score0 > score1 ? type0 : type1;\n}","map":{"version":3,"names":["db","require","extname","mimeScore","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","exports","charset","charsets","lookup","contentType","extension","extensions","Object","create","types","_extensionConflicts","populateMaps","type","match","exec","mime","toLowerCase","test","str","indexOf","exts","length","path","slice","keys","forEach","forEachMimeType","i","_preferredType","legacyType","_preferredTypeLegacy","push","ext","type0","type1","score0","source","score1","SOURCE_RANK","undefined"],"sources":["C:/Users/andre/hotel_green/frontend/node_modules/express/node_modules/mime-types/index.js"],"sourcesContent":["/*!\r\n * mime-types\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar db = require('mime-db')\r\nvar extname = require('path').extname\r\nvar mimeScore = require('./mimeScore')\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\r\nvar TEXT_TYPE_REGEXP = /^text\\//i\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.charset = charset\r\nexports.charsets = { lookup: charset }\r\nexports.contentType = contentType\r\nexports.extension = extension\r\nexports.extensions = Object.create(null)\r\nexports.lookup = lookup\r\nexports.types = Object.create(null)\r\nexports._extensionConflicts = []\r\n\r\n// Populate the extensions/types maps\r\npopulateMaps(exports.extensions, exports.types)\r\n\r\n/**\r\n * Get the default charset for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction charset (type) {\r\n  if (!type || typeof type !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // TODO: use media-typer\r\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\r\n  var mime = match && db[match[1].toLowerCase()]\r\n\r\n  if (mime && mime.charset) {\r\n    return mime.charset\r\n  }\r\n\r\n  // default text/* to utf-8\r\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\r\n    return 'UTF-8'\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Create a full Content-Type header given a MIME type or extension.\r\n *\r\n * @param {string} str\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction contentType (str) {\r\n  // TODO: should this even be in this module?\r\n  if (!str || typeof str !== 'string') {\r\n    return false\r\n  }\r\n\r\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str\r\n\r\n  if (!mime) {\r\n    return false\r\n  }\r\n\r\n  // TODO: use content-type or other module\r\n  if (mime.indexOf('charset') === -1) {\r\n    var charset = exports.charset(mime)\r\n    if (charset) mime += '; charset=' + charset.toLowerCase()\r\n  }\r\n\r\n  return mime\r\n}\r\n\r\n/**\r\n * Get the default extension for a MIME type.\r\n *\r\n * @param {string} type\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction extension (type) {\r\n  if (!type || typeof type !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // TODO: use media-typer\r\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\r\n\r\n  // get extensions\r\n  var exts = match && exports.extensions[match[1].toLowerCase()]\r\n\r\n  if (!exts || !exts.length) {\r\n    return false\r\n  }\r\n\r\n  return exts[0]\r\n}\r\n\r\n/**\r\n * Lookup the MIME type for a file path/extension.\r\n *\r\n * @param {string} path\r\n * @return {boolean|string}\r\n */\r\n\r\nfunction lookup (path) {\r\n  if (!path || typeof path !== 'string') {\r\n    return false\r\n  }\r\n\r\n  // get the extension (\"ext\" or \".ext\" or full path)\r\n  var extension = extname('x.' + path)\r\n    .toLowerCase()\r\n    .slice(1)\r\n\r\n  if (!extension) {\r\n    return false\r\n  }\r\n\r\n  return exports.types[extension] || false\r\n}\r\n\r\n/**\r\n * Populate the extensions and types maps.\r\n * @private\r\n */\r\n\r\nfunction populateMaps (extensions, types) {\r\n  Object.keys(db).forEach(function forEachMimeType (type) {\r\n    var mime = db[type]\r\n    var exts = mime.extensions\r\n\r\n    if (!exts || !exts.length) {\r\n      return\r\n    }\r\n\r\n    // mime -> extensions\r\n    extensions[type] = exts\r\n\r\n    // extension -> mime\r\n    for (var i = 0; i < exts.length; i++) {\r\n      var extension = exts[i]\r\n      types[extension] = _preferredType(extension, types[extension], type)\r\n\r\n      // DELETE (eventually): Capture extension->type maps that change as a\r\n      // result of switching to mime-score.  This is just to help make reviewing\r\n      // PR #119 easier, and can be removed once that PR is approved.\r\n      const legacyType = _preferredTypeLegacy(\r\n        extension,\r\n        types[extension],\r\n        type\r\n      )\r\n      if (legacyType !== types[extension]) {\r\n        exports._extensionConflicts.push([extension, legacyType, types[extension]])\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// Resolve type conflict using mime-score\r\nfunction _preferredType (ext, type0, type1) {\r\n  var score0 = type0 ? mimeScore(type0, db[type0].source) : 0\r\n  var score1 = type1 ? mimeScore(type1, db[type1].source) : 0\r\n\r\n  return score0 > score1 ? type0 : type1\r\n}\r\n\r\n// Resolve type conflict using pre-mime-score logic\r\nfunction _preferredTypeLegacy (ext, type0, type1) {\r\n  var SOURCE_RANK = ['nginx', 'apache', undefined, 'iana']\r\n\r\n  var score0 = type0 ? SOURCE_RANK.indexOf(db[type0].source) : 0\r\n  var score1 = type1 ? SOURCE_RANK.indexOf(db[type1].source) : 0\r\n\r\n  if (\r\n    exports.types[extension] !== 'application/octet-stream' &&\r\n    (score0 > score1 ||\r\n      (score0 === score1 &&\r\n        exports.types[extension]?.slice(0, 12) === 'application/'))\r\n  ) {\r\n    return type0\r\n  }\r\n\r\n  return score0 > score1 ? type0 : type1\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}