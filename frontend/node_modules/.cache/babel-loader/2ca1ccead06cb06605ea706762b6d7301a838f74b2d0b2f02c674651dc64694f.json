{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\hotel_green\\\\frontend\\\\src\\\\componetes\\\\cad_categoria\\\\cad_categoria.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react'; //import para recuperar dados do back\nimport { coerce, z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { set, useForm } from 'react-hook-form';\nimport { API_URL } from '../../url';\nimport { Key } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CadCategoria() {\n  _s();\n  const validarCategoria = z.object({\n    categoria: z.string().min(1, {\n      message: \"O campo categoria não pode ser vazio\"\n    })\n  });\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    reset,\n    watch,\n    clearErrors,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: zodResolver(validarCategoria)\n  });\n  const onError = errors => {\n    console.log(\"❌ Erros de validação:\");\n    console.log(errors);\n  };\n  const cadastrarCategoria = async dados => {\n    try {\n      const cadCategoria = await fetch(`${API_URL}/api/cadCategoria`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dados)\n      });\n      if (!cadCategoria.sucesso) {}\n    } catch {}\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(cadastrarCategoria, onError),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Adicionar Categoria\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Nome da categoria\",\n          ...register(\"categoria\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), errors.categoria && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: errors.categoria.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(CadCategoria, \"ydQx5y+V45iKPqiGbn5tCjoWp1o=\", false, function () {\n  return [useForm];\n});\n_c = CadCategoria;\nexport default CadCategoria;\nvar _c;\n$RefreshReg$(_c, \"CadCategoria\");","map":{"version":3,"names":["React","useEffect","useState","coerce","z","zodResolver","set","useForm","API_URL","Key","jsxDEV","_jsxDEV","Fragment","_Fragment","CadCategoria","_s","validarCategoria","object","categoria","string","min","message","register","handleSubmit","setValue","reset","watch","clearErrors","formState","errors","resolver","onError","console","log","cadastrarCategoria","dados","cadCategoria","fetch","method","headers","body","JSON","stringify","sucesso","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/andre/hotel_green/frontend/src/componetes/cad_categoria/cad_categoria.js"],"sourcesContent":["import React from 'react';\r\nimport { useEffect, useState } from 'react' //import para recuperar dados do back\r\nimport { coerce, z } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { set, useForm} from 'react-hook-form';\r\nimport { API_URL } from '../../url';\r\nimport { Key } from 'lucide-react';\r\n\r\nfunction CadCategoria (){\r\n    \r\n    const validarCategoria = z.object({\r\n        categoria : z.string().min(1, {message : \"O campo categoria não pode ser vazio\"})\r\n    })\r\n\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setValue,\r\n        reset,\r\n        watch,\r\n        clearErrors,\r\n        formState: { errors }\r\n    } = useForm({\r\n        resolver: zodResolver(validarCategoria)\r\n    })\r\n\r\n    const onError = (errors) => {\r\n        console.log(\"❌ Erros de validação:\");\r\n        console.log(errors);\r\n    };\r\n\r\n    const cadastrarCategoria = async (dados) => {\r\n        try{\r\n            const cadCategoria = await fetch(`${API_URL}/api/cadCategoria`, {\r\n                method : 'POST',\r\n                headers : {\r\n                    'Content-Type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(dados)\r\n            })\r\n\r\n            if(!cadCategoria.sucesso){\r\n\r\n            }\r\n\r\n        }\r\n        catch{\r\n\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div>\r\n                <form onSubmit={handleSubmit(cadastrarCategoria, onError)}>\r\n                    <label>Adicionar Categoria</label>\r\n                    <input type='text' placeholder='Nome da categoria' {...register(\"categoria\")}></input>\r\n                    <button type='submit'>Adicionar</button>\r\n                    {errors.categoria && <p>{errors.categoria.message}</p>}\r\n                </form>\r\n            </div>\r\n            <div>\r\n                {}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CadCategoria"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}